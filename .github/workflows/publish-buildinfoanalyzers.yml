name: CI Build and Publish BuildInfoAnalyzers

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (e.g., release, beta, alpha, dev)'
        required: false
        default: 'release'

jobs:
  build:
    runs-on: windows-latest
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release_type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore BuildInfoAnalyzers/BuildInfoAnalyzers.csproj

      - name: Build
        run: dotnet build BuildInfoAnalyzers/BuildInfoAnalyzers.csproj --configuration Release --no-restore

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: BuildInfoAnalyzers/bin/Release

  test:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore BuildInfoAnalyzers/BuildInfoAnalyzers.csproj

      - name: Build
        run: dotnet build BuildInfoAnalyzers/BuildInfoAnalyzers.csproj --configuration Release --no-restore

      - name: Test
        run: dotnet test BuildInfoAnalyzers.Tests/BuildInfoAnalyzers.Tests.csproj --configuration Release --no-build --logger trx

      - name: Upload test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: BuildInfoAnalyzers.Tests/TestResults/*.trx

  pack-publish:
    needs: test
    runs-on: windows-latest
    outputs:
      package_version: ${{ steps.get_version.outputs.package_version }}
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release_type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore BuildInfoAnalyzers/BuildInfoAnalyzers.csproj

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: BuildInfoAnalyzers/bin/Release

      - name: Read package version from .csproj, append git hash and release type
        id: get_version
        run: |
          [xml]$proj = Get-Content BuildInfoAnalyzers/BuildInfoAnalyzers.csproj
          $baseVersion = $proj.Project.PropertyGroup | Where-Object { $_.PackageVersion } | Select-Object -ExpandProperty PackageVersion -First 1
          if (-not $baseVersion) { $baseVersion = "0.0.1" }
          $releaseType = if ($env:RELEASE_TYPE) { $env:RELEASE_TYPE } else { "release" }
          $gitHash = (git rev-parse --short HEAD).Trim()
          $version = "$baseVersion-$releaseType-$gitHash"
          echo "PACKAGE_VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "::set-output name=package_version::$version"

      - name: Pack NuGet package
        run: dotnet pack BuildInfoAnalyzers/BuildInfoAnalyzers.csproj --configuration Release --no-build --output ./nupkg /p:PackageVersion=${{ env.PACKAGE_VERSION }}

      - name: Upload nupkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Add GitHub Packages source
        run: dotnet nuget add source --username ${{ github.actor }} --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "https://nuget.pkg.github.com/${{ github.repository }}/index.json"

      - name: Publish to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: dotnet nuget push ./nupkg/*.nupkg --api-key $GITHUB_TOKEN --source github --skip-duplicate
