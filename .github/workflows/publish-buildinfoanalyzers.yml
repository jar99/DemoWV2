name: CI Build and Publish BuildInfoAnalyzers

on:
  workflow_dispatch:
    inputs:
      configuration:
        description: 'Build configuration (e.g., Release, Debug)'
        required: false
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      verbosity:
        description: 'Verbosity level for dotnet commands'
        required: false
        default: 'minimal'
        type: choice
        options:
          - quiet
          - minimal
          - normal
          - detailed
          - diagnostic
      warn_as_error:
        description: 'Treat warnings as errors?'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip running tests?'
        required: false
        default: false
        type: boolean
      release_type:
        description: 'Release type (e.g., release, beta, alpha, dev)'
        required: false
        default: 'release'
      platform:
        description: 'Build platform (e.g., AnyCPU, x64, x86)'
        required: false
        default: 'AnyCPU'
        type: choice
        options:
          - AnyCPU
          - x64
          - x86
      target_framework:
        description: 'Target framework (e.g., netstandard2.0, netcoreapp3.1)'
        required: false
        default: 'netstandard2.0'
        type: choice
        options:
          - netstandard2.0
          - netcoreapp3.1
          - net5.0
          - net6.0
          - net7.0
          - net8.0

permissions:
  packages: write

jobs:
  build:
    runs-on: windows-latest
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release_type }}
    steps:
      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore BuildInfoAnalyzers/BuildInfoAnalyzers.csproj

      - name: Build
        run: dotnet build BuildInfoAnalyzers/BuildInfoAnalyzers.csproj --configuration ${{ github.event.inputs.configuration }} --no-restore ${{ github.event.inputs.warn_as_error == 'true' && '--warnaserror' || '' }} --nologo --verbosity ${{ github.event.inputs.verbosity }} /p:Configuration=${{ github.event.inputs.configuration }} /p:Platform=${{ github.event.inputs.platform }} /p:TargetFramework=${{ github.event.inputs.target_framework || 'netstandard2.0' }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: |
            BuildInfoAnalyzers/bin/Release
            BuildInfoAnalyzers/obj

  test:
    needs: build
    if: ${{ github.event.inputs.skip_tests != 'true' }}
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore BuildInfoAnalyzers.Tests/BuildInfoAnalyzers.Tests.csproj

      - name: Build
        run: dotnet build BuildInfoAnalyzers.Tests/BuildInfoAnalyzers.Tests.csproj --configuration Release --no-restore ${{ github.event.inputs.warn_as_error == 'true' && '--warnaserror' || '' }} --nologo --verbosity ${{ github.event.inputs.verbosity }}

      - name: Test
        run: dotnet test BuildInfoAnalyzers.Tests/BuildInfoAnalyzers.Tests.csproj --configuration Release --verbosity ${{ github.event.inputs.verbosity }} --no-build --logger trx --collect "XPlat Code Coverage" --blame

      - name: Upload test results
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: BuildInfoAnalyzers.Tests/TestResults/*.trx

      - name: Upload code coverage report
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage
          path: BuildInfoAnalyzers.Tests/TestResults/**/*.xml

  pack-publish:
    needs: [build, test]
    if: ${{ github.event.inputs.skip_tests == 'true' || always() }}
    runs-on: windows-latest
    outputs:
      package_version: ${{ steps.get_version.outputs.package_version }}
    env:
      RELEASE_TYPE: ${{ github.event.inputs.release_type }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          source-url: https://nuget.pkg.github.com/${{ github.repository_owner}}/index.json
        env:
          NUGET_AUTH_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: build-output
          path: BuildInfoAnalyzers

      - name: Read package version from VERSION file, append git hash, platform, and framework
        id: get_version
        run: |
          $baseVersion = Get-Content BuildInfoAnalyzers/VERSION | Select-Object -First 1
          $releaseType = if ($env:RELEASE_TYPE) { $env:RELEASE_TYPE } else { "release" }
          $platform = if ($env:platform) { $env:platform } else { "AnyCPU" }
          $framework = if ($env:target_framework) { $env:target_framework } else { "netstandard2.0" }
          $gitHash = (git rev-parse --short HEAD).Trim()

          # Mark as prerelease if release_type is not 'release'
          if ($releaseType -ne "release") {
            $suffix = "$releaseType-$platform-$framework-$gitHash"
          } else {
            $suffix = "$platform-$framework-$gitHash"
          }

          echo "PACKAGE_VERSION=$baseVersion" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PACKAGE_SUFFIX=$suffix" | Out-File -FilePath $env:GITHUB_ENV -Append

          echo "package_version=$baseVersion" >> $env:GITHUB_OUTPUT
          echo "package_suffix=$suffix" >> $env:GITHUB_OUTPUT

      - name: Pack NuGet package
        run: dotnet pack BuildInfoAnalyzers/BuildInfoAnalyzers.csproj --configuration Release --no-build --output ./nupkg \
          /p:PackageVersion=${{ env.PACKAGE_VERSION }} \
          /p:PackageVersionSuffix=${{ env.PACKAGE_SUFFIX }} \
          /p:ContinuousIntegrationBuild=true \
          /p:Authors="Jan Reihl" \
          /p:RepositoryUrl="https://github.com/jar99/DemoWV2" \
          /p:PackageReleaseNotes="Tool to add build info to applications." \
          --nologo --verbosity ${{ github.event.inputs.verbosity }}

      - name: Upload nupkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: nupkg
          path: ./nupkg

      - name: Publish to GitHub Packages
        run: dotnet nuget push ".\nupkg\*.nupkg" --skip-duplicate --no-symbols true --timeout 300

      - name: Tag branch with release version
        if: ${{ github.ref_type == 'branch' }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag v${{ env.PACKAGE_VERSION }}
          git push origin v${{ env.PACKAGE_VERSION }}
